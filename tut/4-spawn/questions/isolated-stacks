1. It would mean that these two processes would have an identical view of the stack memory. Concretely, this would mean that they are using the same section of memory as their stack and most likley share stack pointers as well.
2. Assume PID 1 and PID 2 are sharing the stack. When function calls occur in PID 1, it tries to push and pop things to and off the stack in order to maintain the trapframe. However, it's very likely to as it's popping things off the stack, it in fact pops things off the PID 2 stack, and as a result when PID 2 executes again it would crash.
3. A trivial case would be that they never use the stack, but then they would be very useless processes. So a more useful case would be if when using the stack the processes execute in a mutually exclusive manner, and they need to clean up the stack (restore it to what it looked like before) every time they use the stack.
