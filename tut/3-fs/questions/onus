Onus on the allocator: I think the reason why the onus of ensuring the alignment falls on the allocator is for abstraction reasons. There isn't a reason why the caller needs to know about how the allocator finds and assigns memory, and therefore it's much harder for the caller to enforce these rules. The allocator, on the other hand, as the implementor of malloc, can do this pretty easily.

Onus on the caller: I'm not quite sure if my answer here makes sense, but I think giving this responsibility to the caller means that the allocator doesn't need to keep track of this information by having metadata in the blocks (at least not for things like alignment). This means that there's less memory overhead when allocating, and also that upon data corruption of the block, it will only affect this block itself.
